// <auto-generated />
using System;
using Flashy.API.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Flashy.API.Infrastructure.Data.Migrations
{
    [DbContext(typeof(FlashyAPIDBContext))]
    [Migration("20240705165732_FlashCard-Migration")]
    partial class FlashCardMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("flashy")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Flashy.API.Domain.Models.FlashCards.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("FlashCardId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FlashCardId");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit")
                        .HasColumnName("IsCorrect");

                    b.Property<Guid>("TrialId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TrialId");

                    b.HasKey("Id")
                        .HasName("PK_Answer");

                    b.HasIndex("FlashCardId")
                        .HasDatabaseName("IX_Answer_FlashCardId");

                    b.HasIndex("TrialId")
                        .HasDatabaseName("IX_Answer_TrialId");

                    b.ToTable("Answers", "flashy");
                });

            modelBuilder.Entity("Flashy.API.Domain.Models.FlashCards.Deck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("Category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedById");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id")
                        .HasName("PK_Deck");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_Deck_Category");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Deck_CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Deck_Name");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_Deck_UpdatedAt");

                    b.ToTable("Decks", "flashy");
                });

            modelBuilder.Entity("Flashy.API.Domain.Models.FlashCards.FlashCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Answer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedById");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("char(256)")
                        .HasColumnName("Hash");

                    b.Property<string>("Hint")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Hint");

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Question");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_FlashCard");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Hash")
                        .HasDatabaseName("IX_FlashCard_Hash");

                    b.HasIndex("UserId");

                    b.ToTable("FlashCards", "flashy");
                });

            modelBuilder.Entity("Flashy.API.Domain.Models.FlashCards.FlashCardDeck", b =>
                {
                    b.Property<Guid>("FlashCardId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FlashCardId");

                    b.Property<Guid>("DeckId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeckId");

                    b.Property<Guid>("FX_FlashCardDeck_Deck_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FlashCardId", "DeckId")
                        .HasName("PK_FlashCardDeck");

                    b.HasIndex("FX_FlashCardDeck_Deck_Id");

                    b.ToTable("FlashCardDeck", "flashy");
                });

            modelBuilder.Entity("Flashy.API.Domain.Models.FlashCards.FlashCardTrial", b =>
                {
                    b.Property<Guid>("FlashCardId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FlashCardId");

                    b.Property<Guid>("TrialId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TrialId");

                    b.HasKey("FlashCardId", "TrialId")
                        .HasName("PK_FlashCardTrial");

                    b.HasIndex("TrialId");

                    b.ToTable("FlashCardTrial", "flashy");
                });

            modelBuilder.Entity("Flashy.API.Domain.Models.FlashCards.Trial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CompletedAt");

                    b.Property<int>("LastFlashCardIndex")
                        .HasColumnType("int")
                        .HasColumnName("LastFlashCardIndex");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartedAt");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("PK_Trial");

                    b.HasIndex("StartedAt")
                        .HasDatabaseName("IX_Trial_StartedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Trial_UserId");

                    b.ToTable("Trials", "flashy");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("NormalizedName");

                    b.HasKey("Id")
                        .HasName("PK_Roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_NormalizedName");

                    b.ToTable("Roles", "flashy");
                });

            modelBuilder.Entity("RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("ClaimType");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("ClaimValue");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId");

                    b.HasKey("Id")
                        .HasName("PK_RoleClaims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_RoleClaims_RoleId");

                    b.ToTable("RoleClaims", "flashy");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(320)")
                        .HasColumnName("Email");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("LastName");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(320)")
                        .HasColumnName("NormalizedEmail");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("NormalizedUserName");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("UserName");

                    b.HasKey("Id")
                        .HasName("PK_Users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_NormalizedEmail");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_NormalizedUserName");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_UserName");

                    b.ToTable("Users", "flashy");
                });

            modelBuilder.Entity("UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("ClaimType");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("ClaimValue");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("PK_UserClaims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserClaims_UserId");

                    b.ToTable("UserClaims", "flashy");
                });

            modelBuilder.Entity("UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("LoginProvider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("ProviderKey");

                    b.Property<string>("NormalizedProviderDisplayName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("NormalizedProviderDisplayName");

                    b.Property<string>("ProviderDisplayName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("ProviderDisplayName");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("PK_UserLogins");

                    b.HasIndex("NormalizedProviderDisplayName")
                        .HasDatabaseName("IX_UserLogins_NormalizedProviderDisplayName");

                    b.HasIndex("ProviderDisplayName")
                        .HasDatabaseName("IX_UserLogins_ProviderDisplayName");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserLogins_UserId");

                    b.ToTable("UserLogins", "flashy");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_UserRoles");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "flashy");
                });

            modelBuilder.Entity("UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<string>("LoginProvider")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("LoginProvider");

                    b.Property<string>("Name")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("PK_UserTokens");

                    b.ToTable("UserTokens", "flashy");
                });

            modelBuilder.Entity("Flashy.API.Domain.Models.FlashCards.Answer", b =>
                {
                    b.HasOne("Flashy.API.Domain.Models.FlashCards.FlashCard", "FlashCard")
                        .WithMany()
                        .HasForeignKey("FlashCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FX_Answer_FlashCard_Id");

                    b.HasOne("Flashy.API.Domain.Models.FlashCards.Trial", "Trial")
                        .WithMany("Answers")
                        .HasForeignKey("TrialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FX_Answer_Trial_Id");

                    b.Navigation("FlashCard");

                    b.Navigation("Trial");
                });

            modelBuilder.Entity("Flashy.API.Domain.Models.FlashCards.Deck", b =>
                {
                    b.HasOne("User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FX_Deck_User_Id");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Flashy.API.Domain.Models.FlashCards.FlashCard", b =>
                {
                    b.HasOne("User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FX_FlashCard_User_Id");

                    b.HasOne("User", null)
                        .WithMany("FavouriteFlashCards")
                        .HasForeignKey("UserId");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Flashy.API.Domain.Models.FlashCards.FlashCardDeck", b =>
                {
                    b.HasOne("Flashy.API.Domain.Models.FlashCards.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("FX_FlashCardDeck_Deck_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flashy.API.Domain.Models.FlashCards.FlashCard", "FlashCard")
                        .WithMany()
                        .HasForeignKey("FlashCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FX_FlashCardDeck_FlashCard_Id");

                    b.Navigation("Deck");

                    b.Navigation("FlashCard");
                });

            modelBuilder.Entity("Flashy.API.Domain.Models.FlashCards.FlashCardTrial", b =>
                {
                    b.HasOne("Flashy.API.Domain.Models.FlashCards.FlashCard", "FlashCard")
                        .WithMany()
                        .HasForeignKey("FlashCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FX_FlashCardTrial_FlashCard_Id");

                    b.HasOne("Flashy.API.Domain.Models.FlashCards.Trial", "Trial")
                        .WithMany()
                        .HasForeignKey("TrialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FX_FlashCardTrial_Trial_Id");

                    b.Navigation("FlashCard");

                    b.Navigation("Trial");
                });

            modelBuilder.Entity("Flashy.API.Domain.Models.FlashCards.Trial", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Trials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FX_Trial_User_Id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoleClaim", b =>
                {
                    b.HasOne("Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserClaim", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserLogin", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserToken", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flashy.API.Domain.Models.FlashCards.Trial", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("FavouriteFlashCards");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("Trials");
                });
#pragma warning restore 612, 618
        }
    }
}
